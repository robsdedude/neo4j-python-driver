#!/usr/bin/env bash
set -e

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/.."
SRC="${ROOT}/src"
DIST_FOLDER="dist"
DIST="${ROOT}/${DIST_FOLDER}"
DIST_FILES=()

function load_dist_files {
    local VERSION
    VERSION="$1"; shift
    mapfile -td '' DIST_FILES < <(find "$DIST" -regex '^.*/\(neo4j\|neo4j-driver\|neo4j_driver\|neo4j-py\|neo4j_py\|neo4j-rust-ext\|neo4j_rust_ext\)-'"${VERSION}"'\(-.+\)?\.\(whl\|tar\.gz\)$' -print0)
}

function sed_extract {
    local PATTERN FILE OUT MATCHES
    PATTERN="${1////\\/}"; shift
    FILE="$1"; shift
    OUT="$1"; shift
    MATCHES=$(sed -n "s/^${PATTERN}/\1/p" "$FILE")
    if [ "$(echo "$MATCHES" | wc -l)" -ne 1 ]; then
        echo "Error: Expected exactly one match for pattern '${PATTERN}' in file '${FILE}'."
        echo "Found $(echo "$MATCHES" | wc -l) matches."
        return 1
    fi
    eval "$OUT="'"'"$MATCHES"'"'
    return 0
}

function sed_replace {
    local PATTERN REPLACEMENT FILE MATCHES FORCE
    PATTERN="${1////\\/}"; shift
    REPLACEMENT="${1////\\/}"; shift
    FILE="$1"; shift
    MATCHES="$(sed -i "s/${PATTERN}/${REPLACEMENT}/g w /dev/stdout" "${FILE}" | wc -l)"
    if [ "$1" = "--force" ] || [ "$1" = "-f" ]; then
        FORCE=1
        shift
    fi
    if [ -n "$FORCE" ]; then
        return 0
    fi
    if [ "${MATCHES}" -eq 0 ]; then
        echo "Error: No matches found for pattern '${PATTERN}' in file '${FILE}'"
        return 1
    fi
}

function get_package {
    cd "${SRC}"
    python -c "from neo4j._meta import package; print(package)"
    cd - > /dev/null
}

function set_package {
    local VALUE
    VALUE="$1"; shift
    sed_replace '^\(package\s*=\s*"\).*\("  # \[script-set\]$\)' '\1'"$VALUE"'\2' "${SRC}/neo4j/_meta.py" "$@"
    sed_replace '^\(name\s*=\s*"\).*\("  # \[script-set\]$\)' '\1'"$VALUE"'\2' "${ROOT}/pyproject.toml" "$@"
}

function get_version {
    cd "${SRC}"
    python -c "from neo4j._meta import version; print(version)"
    cd - > /dev/null
}

res=$(sed -n 's/^version\s*=\s*"\(.*\)"  # \[script-set\]$/\1/p' "src/neo4j/_meta.py")

function set_version {
    local VALUE
    VALUE="$1"; shift
    sed_replace '^\(version\s*=\s*"\).*\("  # \[script-set\]$\)' '\1'"$VALUE"'\2' "${SRC}/neo4j/_meta.py" "$@"
    sed_replace '^\(version\s*=\s*"\).*\("  # \[script-set\]$\)' '\1'"$VALUE"'\2' "${ROOT}/pyproject.toml" "$@"
}

function get_deprecated {
    cd "${SRC}"
    python -c "from neo4j._meta import deprecated_package; print(deprecated_package)"
    cd - > /dev/null
}

function set_deprecated {
    local VALUE
    VALUE="$1"; shift
    sed_replace '^\(deprecated_package\s*=\s*\).*\(  # \[script-set\]$\)' '\1'"$VALUE"'\2' "${SRC}/neo4j/_meta.py" "$@"
}

function check_file {
    echo -n "Checking dist file '$1' ... "

    OLD_IFS="$IFS"
    function cleanup {
        IFS="$OLD_IFS"
    }
    IFS=
    trap cleanup EXIT

    FILES=($1)

    trap - EXIT
    cleanup

    if [ "${#FILES[@]}" != "1" ]; then
        echo "Error: Expected exactly one file, found ${#FILES[@]}:"
        for FILE in "${FILES[@]}"; do
            echo "  '$FILE'"
        done
        return 1
    fi

    if [ -f "${FILES[0]}" ]; then
        echo "OK: Found '${FILES[0]}'"
        return 0
    else
        echo "Missing"
        return 1
    fi
}

function set_metadata_and_setup {
    local DEPRECATED="False"
    local SDIST
    local WHEEL
    local MATURIN_WHEEL
    local CROSS
    local DOCKER_PRUNE
    local PWD
    PWD="$ROOT"
    while [[ $# -gt 0 ]]; do
        case $1 in
            --deprecated)
                DEPRECATED="True"
                shift
                ;;
            --sdist)
                SDIST=1
                shift
                ;;
            --wheel)
                WHEEL=1
                shift
                ;;
            --wheel-maturin)
                MATURIN_WHEEL=1
                shift
                ;;
            --cross)
                CROSS=1
                shift
                ;;
            --docker-prune)
                DOCKER_PRUNE=1
                shift
                ;;
            --pwd)
                PWD="$2"
                shift
                shift
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $((${WHEEL:-0} + ${MATURIN_WHEEL:-0} + ${CROSS:-0})) -gt 1 ]; then
        echo "Choose at most one of --wheel, --wheel-maturin or --cross"
        return 1
    fi

    local PACKAGE="$1"; shift
    local VERSION="$1"; shift

    cd "${ROOT}"

    # Capture original package metadata
    local ORIGINAL_PACKAGE
    ORIGINAL_PACKAGE=$(get_package)
    local ORIGINAL_VERSION
    ORIGINAL_VERSION=$(get_version)
    local ORIGINAL_DEPRECATED
    ORIGINAL_DEPRECATED=$(get_deprecated)
    echo "Source code originally configured for package ${ORIGINAL_PACKAGE}/${ORIGINAL_VERSION}/deprecated=${ORIGINAL_DEPRECATED}"
    echo "----------------------------------------"
    echo "_meta.py:"
    grep "  # \[script-set\]" "${SRC}/neo4j/_meta.py"
    echo ""
    echo "pyproject.toml:"
    grep "  # \[script-set\]" "${ROOT}/pyproject.toml"
    grep "# \[rust_ext\]" "${ROOT}/pyproject.toml"
    echo ""
    echo "MANIFEST.in:"
    grep "# \[rust_ext\]" "${ROOT}/MANIFEST.in"
    echo "----------------------------------------"
    echo ""

    function cleanup() {
        cd "${ROOT}"
        # Reset to original package metadata
        set_package "${ORIGINAL_PACKAGE}" --force
        set_version "${ORIGINAL_VERSION}" --force
        set_deprecated "${ORIGINAL_DEPRECATED}" --force
        echo "Source code reconfigured back to original package ${ORIGINAL_PACKAGE}/${ORIGINAL_VERSION}/deprecated=${ORIGINAL_DEPRECATED}"
        echo "----------------------------------------"
        echo "_meta.py:"
        grep "  # \[script-set\]" "${SRC}/neo4j/_meta.py"
        echo ""
        echo "pyproject.toml:"
        grep "  # \[script-set\]" "${ROOT}/pyproject.toml"
        echo "----------------------------------------"
    }
    trap cleanup EXIT

    # Temporarily override package metadata
    set_package "${PACKAGE}"
    set_version "${VERSION}"
    set_deprecated "${DEPRECATED}"
    echo "Source code reconfigured for package ${PACKAGE}/${VERSION}/deprecated=${DEPRECATED}"
    echo "----------------------------------------"
    echo "_meta.py:"
    grep "  # \[script-set\]" "${SRC}/neo4j/_meta.py"
    echo ""
    echo "pyproject.toml:"
    grep "  # \[script-set\]" "${ROOT}/pyproject.toml"
    echo "----------------------------------------"
    echo ""

    find . -name "*.pyc" -delete
    rm -rf "${SRC}/*.egg-info" 2> /dev/null

    # source distribution (sdist) build
    if [ -n "${SDIST}" ]; then
        python -m build --sdist
    fi

    if [ -n "${CROSS}" ]; then
        echo "----------------------------------------"
        echo "Compiling for windows and macOS (docker image ubuntu:22.04)"
        docker run --rm -v "$ROOT:/io" -w /io -i -a stdout -a stderr ubuntu:22.04 bash << EOF1
set -ex

apt-get update -q
apt-get install -yq sudo llvm python3 python3-pip mingw-w64 curl
pip install -U pip
pip install maturin[zig]

groupadd --non-unique -g $(id -g) docker
useradd --create-home --non-unique -u $(id -u) -g $(id -g) docker
adduser docker sudo

sudo -u docker bash -ex << "EOF2"

export RUSTUP_HOME="\$HOME/.rustup"
export CARGO_HOME="\$HOME/.cargo"
curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
export PATH="\$HOME/.cargo/bin:\$PATH"
rustup target add x86_64-pc-windows-gnu i686-pc-windows-gnu aarch64-pc-windows-msvc x86_64-apple-darwin aarch64-apple-darwin

cd /io
for python in python3.7 python3.8 python3.9 python3.10 python3.11 python3.12; do
    maturin build --out "$DIST_FOLDER" --release --interpreter "\$python" --target x86_64-pc-windows-gnu
    maturin build --out "$DIST_FOLDER" --release --interpreter "\$python" --target i686-pc-windows-gnu
    maturin build --out "$DIST_FOLDER" --release --interpreter "\$python" --target aarch64-pc-windows-msvc
    maturin build --out "$DIST_FOLDER" --release --zig --interpreter "\$python" --target x86_64-apple-darwin
    maturin build --out "$DIST_FOLDER" --release --zig --interpreter "\$python" --target aarch64-apple-darwin
done

EOF2
EOF1
        if [ -n "${DOCKER_PRUNE}" ]; then
            docker rmi ubuntu:22.04  || true
        fi
        echo "----------------------------------------"
        echo ""
        local TUPLE
        for TUPLE in x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-unknown-linux-musl armv7-unknown-linux-gnueabihf; do
            local IMAGE
            case "${TUPLE}" in
                x86_64-unknown-linux-gnu)
                    IMAGE="ghcr.io/rust-cross/manylinux2014-cross:x86_64"
                    ;;
                aarch64-unknown-linux-gnu)
                    IMAGE="ghcr.io/rust-cross/manylinux2014-cross:aarch64"
                    ;;
                x86_64-unknown-linux-musl)
                    IMAGE="ghcr.io/rust-cross/musllinux_1_2-cross:x86_64"
                    ;;
                armv7-unknown-linux-gnueabihf)
                    IMAGE="ghcr.io/rust-cross/manylinux2014-cross:armv7"
                    ;;
            esac

            echo "----------------------------------------"
            echo "Compiling for manylinux ${TUPLE} (docker image ${IMAGE})"
            docker run --rm -v "$ROOT:/io" -w /io -i -a stdout -a stderr "${IMAGE}" bash << EOF1
set -ex

pip install -U pip
pip install maturin

groupadd --non-unique -g $(id -g) docker
useradd --create-home --non-unique -u $(id -u) -g $(id -g) docker
adduser docker sudo

sudo -EH -u docker bash -ex << EOF2

export PATH="\\\$PATH:\$PATH"
export RUSTUP_HOME="\\\$HOME/.rustup"
export CARGO_HOME="\\\$HOME/.cargo"
curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $TUPLE --profile minimal
export PATH="\\\$CARGO_HOME/bin:\\\$PATH"

export PATH="\\\$PATH:/opt/python/cp37-cp37m/bin:/opt/python/cp38-cp38/bin:/opt/python/cp39-cp39/bin:/opt/python/cp310-cp310/bin:/opt/python/cp311-cp311/bin:/opt/python/cp312-cp312/bin"

cd /io
for python in python3.7 python3.8 python3.9 python3.10 python3.11 python3.12; do
    maturin build --out "$DIST_FOLDER" --release --interpreter "\\\$python" --target $TUPLE
done

EOF2
EOF1
            if [ -n "${DOCKER_PRUNE}" ]; then
                docker rmi "${IMAGE}"  || true
            fi
            echo "----------------------------------------"
            echo ""
        done
    elif [ -n "${MATURIN_WHEEL}" ]; then
        # native wheel build using maturin
        maturin build --out "$DIST_FOLDER" --release
    elif [ -n "${WHEEL}" ]; then
        # native wheel build using default build backend
        python -m build --wheel
    fi

    trap - EXIT
    cleanup
}
